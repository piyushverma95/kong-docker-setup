#---KONG---

1.Install kong as installable file in ubuntu

2.Start
 -- with Postgres database -- CREATE USER kong; CREATE DATABASE kong OWNER kong;
 -- edit kong.conf and update db password.
 -- kong migrations bootstrap [-c /path/to/kong.conf]
 -- kong start [-c /path/to/kong.conf]

3. Use kong
 -- curl -i http://localhost:8001/

4. Configure Services and Routes

CRUD operations on SERVICES using Admin API
a. CREATE service
 -- curl -X POST http://localhost:8001/services/ --data 'name=<service-name>' --data 'url=http://<host>:<port>/<api-endpoint>'

eg: 
Request: 
$ curl -i -X POST \
  --url http://localhost:8001/services/ \
  --data 'name=example-service' \
  --data 'url=http://mockbin.org'

curl -X POST http://localhost:8001/services/ --data 'name=first-service' --data 'url=http://localhost:8080/user'

Response:
HTTP/1.1 201 Created
Content-Type: application/json
Connection: keep-alive

{
   "host":"mockbin.org",
   "created_at":1519130509,
   "connect_timeout":60000,
   "id":"92956672-f5ea-4e9a-b096-667bf55bc40c", //service-id
   "protocol":"http",
   "name":"example-service", //service-name
   "read_timeout":60000,
   "port":80,
   "path":null,
   "updated_at":1519130509,
   "retries":5,
   "write_timeout":60000
}

b.GET all services
  -- curl -X GET http://localhost:8001/services
c.GET service details
  -- curl -X GET http://localhost:8001/services/<service-id>           or    curl -X GET http://localhost:8001/services/<service-name>
d.DELETE a service
  -- curl -X DELETE http://localhost:8001/services/<service-id>/<service-name>
e.PUT for updating existing service details
  -- curl -X PUT http://localhost:8001/services/<service-id>/<service-name> --data 'url=http://<host>:<port>/<api-endpoint>'


CRUD operations on ROUTES using Admin API
a. CREATE route
 -- curl -X POST http://localhost:8001/services/<service-name>/routes --data 'name=<route-name>'(optional) --data 'hosts = <host>/[host]'
 OR
  -- curl -X POST http://localhost:8001/services/<service-name>/routes --data 'name=<route-name>'(optional) --data 'paths = /<pathname>'

eg:
Request:
$ curl -i -X POST \
  --url http://localhost:8001/services/example-service/routes \
  --data 'hosts[]=example.com'
  
curl -X POST http://localhost:8001/services/first-service/routes --data 'hosts[]=18.212.215.245'
	
Response:
HTTP/1.1 201 Created
Content-Type: application/json
Connection: keep-alive

{
   "created_at":1519131139,
   "strip_path":true,
   "hosts":[
      "example.com"
   ],
   "preserve_host":false,
   "regex_priority":0,
   "updated_at":1519131139,
   "paths":null,
   "service":{
      "id":"79d7ee6e-9fc7-4b95-aa3b-61d2e17e7516" //service-id
   },
   "methods":null,
   "protocols":[
      "http",
      "https"
   ],
   "id":"f9ce2ed7-c06e-4e16-bd5d-3a82daef3f9d"  //route-id
}
---------
Access your micro-service using route: curl -X GET http://localhost:8000 --header 'Host:18.212.215.245' or use on browser: http://18.212.215.245:8000
18.212.215.245 is the IP of my server
-----------
b.GET all routes
  -- curl -X GET http://localhost:8001/routes
c.GET route details
  -- curl -X GET http://localhost:8001/routes/<route-id>/<route-name>
d.DELETE a route
  -- curl -X DELETE http://localhost:8001/routes/<route-id>/<route-name>
e.PUT for updating existing route details
  -- curl -X PUT http://localhost:8001/routes/<route-id>/<route-name> --data 'paths = /<pathname>'

5.Configure plugins

Find all plugins enabled in kong
-- curl -X GET http://localhost:8001/plugins/enabled

CRUD operations on PLUGINS using Admin API
a. CREATE plugins
 -- curl -X POST http://localhost:8001/services/<service-name>/plugins --data 'name=<plugin-name>' --data 'config.http_endpoint=<http://>' \
          --data 'config.method=POST' (optional) --data 'config.timeout=1000' (optional) --data 'config.keepalive=1000' (optional)


b.GET all plugins
  -- curl -X GET http://localhost:8001/plugins
c.GET route details
  -- curl -X GET http://localhost:8001/plugins/<plugin-id>
d.DELETE a route
  -- curl -X DELETE http://localhost:8001/plugins/<plugin-id>
e.PUT for updating existing route details
  -- curl -X PUT http://localhost:8001/plugins/<plugin-id> --data 'name=<plugin-name>' --data 'config.http_endpoint=<http://>'

6.Custom plugins

-- create custom plugins.
   a. create handler.lua
   b. create schema.lua

-- adding third party custom plugins to kong.
   a. create a folder inside /usr/local/share/lua/5.1/kong/plugins/<custom-plugin-name>
   b. copy '*.lua files' into the folder

-- Register kong plugin to kong platform
   c. find for kong-***.***.rockspec file (possibly under /usr/local/lib/luarocks/rocks/kong/0.14.1-0/ and update as below, make sure you have luarocks installed
      ["kong.plugins.<custom-plugin-name>.handler"] = "kong/plugins/<custom-plugin-name>/handler.lua",
      ["kong.plugins.<custom-plugin-name>.schema"] = "kong/plugins/<custom-plugin-name>/schema.lua",
	  
	  
   d.edit kong.conf file and update as below
     plugins = bundled, <custom-plugin-name>

   e. kong prepare
   f. kong reload/kong restart

-- Verfiy custom-plugin is enabled in kong platform
   -- curl -X GET http://localhost:8001/plugins/enabled

7. Users/Clients accessing data by forwarding requests through Kong

-- curl -X GET http://localhost:8000/<pathname> (if specified while creating route)
OR
-- curl -X GET http://localhost:8000/ --header 'Host: <host-name>'

eg:
$ curl -i -X GET \
  --url http://localhost:8000/ \
  --header 'Host: example.com'

References:

https://docs.konghq.com/0.13.x/admin-api/#service-object
https://docs.konghq.com/0.13.x/getting-started/configuring-a-service/
https://apifriends.com/api-streaming/developing-an-helloworld-kong-plugin/
https://docs.konghq.com/0.13.x/proxy/
